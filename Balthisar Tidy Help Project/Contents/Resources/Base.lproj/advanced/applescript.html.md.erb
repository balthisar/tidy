---
title: Use AppleScript to Control <em>Balthisar Tidy</em>
blurb: Learn how AppleScript can be used to automate <em>Balthisar Tidy</em>.
       If you have dozen, hundreds, or thousands of files to process, then
       AppleScript can handle the job.
layout: template-logo-medium
order: 1
target:
 - :feature_supports_applescript
---
<%= md_links %>
<%= md_images %>

<% if target_feature?(:feature_supports_applescript) %>

<% content_for :seeAlso do %>
<ul>
    <li><a href="https://developer.apple.com/library/mac/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html">AppleScript Language Guide</a></li>
    <li><a href="http://www.macosxautomation.com/applescript/uiscripting/index.html">AppleScript UI Scripting</a></li>
</ul>
<% end %>

<%= current_page.data.title %>
==============================

_<%= product_name %>_’s support for AppleScript empowers you to put the power of
automation to work for you. Here are just a few ideas of the things you can
do:

 - Use a batch script to Tidy in place dozens, hundreds, or even thousands of
   files.

 - Supercharge the batch script to Tidy your files and copy them to a server
   directory.

 - Use Mac&nbsp;OS&nbsp;X’ **Folder Actions** to Tidy a file every time you save
   or copy it into the folders of your choice.

To get started making your own scripts, simply look at _<%= product_name %>_’s
AppleScript dictionary in the AppleScript editor of your choice.

Sample AppleScripts
-------------------

_<%= product_name %>_ comes with several example scripts that demonstrate a
little bit of the power the AppleScript offers to you. The scripts include
added features that make _<%= product_name %>_ work even better for you, such
as:

- Use _<%= product_name %>_ as a batch processor for multiple document tidying.

- Use Mac&nbsp;OS&nbsp;X’s **Folder Actions** to automatically Tidy documents
  placed into a specific folder.
  
- Scripts that can be installed into **BBEdit** or **TextWrangler** text editors
  in order to provide always-available, instant tidying from within those
  environments.

These sample scripts are included on a disk image inside _<%= product_name %>_’s
application bundle for your convenience.

[*Open the disk image now*](x-help-script://com.balthisar.Balthisar-Tidy.pro.help/assets/applescripts/open_dmg.scpt?AppleScriptsforTidy.dmg).
{: .note }

Note that if you are viewing this documentation in a web browser, then that link
won’t work for you. Just open _<%= product_name %>_’s bundle and you can find
the disk image.
{: .note }

_<%= product_name %>_ and _Balthisar Tidy Service Helper_
---------------------------------------------------------

Some of _<%= product_name %>_’s AppleScript functionality is provided by a
separate, faceless, background application called _Balthisar Tidy Service
Helper_. It’s a good option for using AppleScript instead of using
_<%= product_name %>_ directly because it’s small, lightweight, and can produce
Tidy’d text without loading the entire _<%= product_name %>_ application.

The APIs for both applications are described below.

The _<%= product_name %>_ AppleScript API
-----------------------------------------

### The Standard Suite

_<%= product_name %>_ supports the entire Standard Suite. Please consult
Apple’s AppleScript documentation (see the sidebar for links) for a description
of all of these features.


### The Document Suite

While the Standard Suite gives you a lot of power, the Document Suite provides
two additional AppleScript properties that will be critical to your automation
workflow.

`sourceText`
 : If you set this document property with some untidy HTML, it will be Tidy’d
   using the Preferences from Tidy options and made available immediately via
   the `tidyText` property.

`tidyText`
 : This read only property returns the Tidy’d value of the `sourceText` that
   you set.


### Developer Scripting Suite

The developer suite is primarily useful to the developers of
_<%= product_name %>_, but can offer some utility to you if also used with
UI&nbsp;Scripting. In addition, because of application sandboxing, there is one
critical property available in the developer suite that will be useful if you
want to perform the equivalent of **Save As…** using AppleScript.

`countOfPrefsWindowPanels`
 : This read-only property displays the number of Preferences panels that are
   available in _<%= product_name %>_’s [Preferences][prefs-index] window. Some
   variations of _Balthisar Tidy_ have a different number of panels.

`documentWindowIsInScreenshotMode`
 : This property serves absolutely no purpose to normal developers whatsoever,
   unless you happen to have the need to hide the document window when the
   various helpers are shown. This may be the case if you want to take easy,
   clear screenshots of _<%= product_name %>_’s various interface elements so
   that you can provide excellent, high-quality, world-class documentation.
   
   When this property is `true` the document window will adjust itself to 100%
   transparency when helpers appear. This gives various screen shot utilities
   the ability to capture them without the document window in the background.

`identifierOfVisiblePrefsWindowPanel`
 : This read-only property returns the unique, internal identifier of the
   currently-visible preferences panel.

`indexOfVisiblePrefsWindowPanel`
 : This property indicates/sets the currently visible preference panel. It uses
   a 1-based index.

`preferencesWindowIsVisible`
 : This property indicates/sets whether the Preferences window is open or not
   (but not necessarily “visible” if occluded by another item on screen.)

`saveAsDestination`
 : Returns the POSIX path of the user-chosen directory after presenting a file
   open dialog to the user. Because _<%= product_name %>_ is sandboxed, the
   operating system prevents it from saving files to paths not specifically
   chosen by the user. Therefore instead of using AppleScript to ask the user to
   select a destination, ask _<%= product_name %>_ to ask the user instead. This
   path will remain valid until the next time _<%= product_name %>_ launches.

`titleOfVisiblePrefsWindowPanel`
 : This read-only property returns the localized name of the currently-visible
   Preferences window panel.

### AppleScript UI Scripting

In addition to its built-in AppleScript support, _<%= product_name %>_ also
plays nicely with UI&nbsp;Scripting. See the link in the sidebar for more information
about using UI&nbsp;Scripting.

The _Balthisar Tidy Service Helper_ API
---------------------------------------

The _Balthisar Tidy Service Helper_ API does _not_ support the standard
AppleScript suite. Rather it is a single purpose, lightweight tool to provide
Tidying services without cluttering your screen with a GUI. It consists of a
limited Application Suite toward this end.

### The Application Suite

Unlike scripting _<%= product_name %>_ wherein all Tidying is document-based
and contained within isolated containers, _Balthisar Tidy Service Helper_ is
a single instance. This means that the following properties are available
system-wide to any AppleScript that chooses to use them.

If you attempt to use these properties simultaneously from multiple scripts 
running at the same time, your results could be quite interesting. It’s “safe”
to do so in that no harm will come to your computer, but the results are subject
to a first-come, first-serve basis that you have no control over. Still, they
provide very light weight, very quick Tidying system wide.

`sourceText`
 : If you set this property with some untidy HTML, it will be Tidy’d
   using the Tidy options in Preferences and made available immediately via the
   `tidyText` and `tidyBodyText` properties.
 
`tidyText`
 : This read only property returns the Tidy’d value of the `sourceText` that
   you set. It will always return a full HTML document regardless of
   _<%= product_name %>_’s `show-body-only` setting.
 
`tidyBodyText`
 : This read only property returns the Tidy’d value of the `sourceText` that
   you set. It will only ever return the body portion of an HTML document
   regardless of _<%= product_name %>_’s `show-body-only` setting. This can
   be quite useful if you only wish to Tidy snippets of text.

<% end %>
