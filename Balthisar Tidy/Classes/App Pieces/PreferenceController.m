/**************************************************************************************************

	PreferenceController.m

	part of Balthisar Tidy

	The main preference controller. Here we'll control the following:

		o Handles the application preferences.
		o Implements class methods to be used before instantiation.


	The MIT License (MIT)

	Copyright (c) 2001 to 2013 James S. Derry <http://www.balthisar.com>

	Permission is hereby granted, free of charge, to any person obtaining a copy of this software
	and associated documentation files (the "Software"), to deal in the Software without
	restriction, including without limitation the rights to use, copy, modify, merge, publish,
	distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
	Software is furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
	BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 **************************************************************************************************/

#import <Cocoa/Cocoa.h>
#import "PreferenceController.h"
#import "JSDTidyDocument.h"

// these convenience definitions for our prefs keys.
// the rest are generated by TidyLib directly.
NSString *JSDKeySavingPrefStyle = @"SavingPrefStyle";
NSString *JSDKeyWarnBeforeOverwrite = @"WarnBeforeOverwrite";


@implementation PreferenceController


#pragma mark - Class Methods


/*–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*
	registerUserDefaults
		register all of the user defaults. Implemented as a CLASS
		method in order to keep this with the preferences controller,
		but the preferences controller won't have been created yet.
 *–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*/
+ (void)registerUserDefaults
{
	NSMutableDictionary *defaultValues = [NSMutableDictionary dictionary];
	
	// Put all of the defaults in the dictionary
	defaultValues[JSDKeySavingPrefStyle] = @2;
	defaultValues[JSDKeyWarnBeforeOverwrite] = @NO;
	
	// Get the defaults from the linked-in TidyLib
	[JSDTidyDocument addDefaultsToDictionary:defaultValues];
	
	// Register the defaults with the defaults system
	[[NSUserDefaults standardUserDefaults] registerDefaults: defaultValues];
}


#pragma mark - Instance Methods


#pragma mark - initializers and deallocs and setup


/*–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*
	init
 *–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*/
- (id)init
{
	if (self = [super initWithWindowNibName:@"Preferences"])
	{
		[self setWindowFrameAutosaveName:@"PrefWindow"];
	}
	return self;
}


/*–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*
	dealloc
 *–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*/
- (void)dealloc
{
	tidyProcess = nil;
	[optionController release];
	[super dealloc];
}


/*–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*
	awakeFromNib
		Setup an |OptionPaneController|.
 *–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*/
- (void) awakeFromNib
{
	// create an |OptionPaneController| and put it
	// in place of the empty optionPane in the xib.
	if (!optionController)
	{
		optionController = [[OptionPaneController alloc] init];
	}
	[optionController putViewIntoView:optionPane];
	[optionController setTarget:self];
	[optionController setAction:@selector(optionChanged:)];
	tidyProcess = [optionController tidyDocument];
}


/*–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*
	windowDidLoad
		Use the defaults to setup the correct preferences settings.
 *–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*/
- (void)windowDidLoad
{
	NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
	
	[saving1 setState:([defaults integerForKey: JSDKeySavingPrefStyle] == 1)];
	[saving2 setState:([defaults integerForKey: JSDKeySavingPrefStyle] == 2)];
	[savingWarn setState:[defaults boolForKey: JSDKeyWarnBeforeOverwrite]];
	[savingWarn setEnabled:[saving1 state]];
	
	// Put the Tidy defaults into the |tidyProcess|.
	[tidyProcess takeOptionValuesFromDefaults:defaults];
}


#pragma mark - Events


/*–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*
	radioSavingChanged
		One of the radio buttons for saving options has changed.
		Handle this apart, since we're not using a matrix.
 *–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*/
- (IBAction)radioSavingChanged:(id)sender
{
	[saving1 setState:NO];
	[saving2 setState:NO];
	[sender setState:YES];
	[savingWarn setEnabled:[saving1 state]];
	[self preferenceChanged:nil];
}


/*–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*
	preferenceChanged
		one of the saving/batch prefs changed. Log and notify.
 *–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*/
- (IBAction)preferenceChanged:(id)sender
{
	// update the preference registry
	[[NSUserDefaults standardUserDefaults] setInteger:0 forKey:JSDKeySavingPrefStyle];
	if ([saving1 state]) [[NSUserDefaults standardUserDefaults] setInteger:1 forKey:JSDKeySavingPrefStyle];
	if ([saving2 state]) [[NSUserDefaults standardUserDefaults] setInteger:2 forKey:JSDKeySavingPrefStyle];
	[[NSUserDefaults standardUserDefaults] setBool:[savingWarn state] forKey:JSDKeyWarnBeforeOverwrite];
	// send the notification that a saving preference has changed.
	[[NSNotificationCenter defaultCenter] postNotificationName:@"JSDSavePrefChange" object:nil];
}


/*–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*
	optionChanged
		One of the preferences changed in the table view. We're
		here as a result of having been set the Action for the
		OptionPaneController. We're going to record the preference,
		but we're not going to post a notification, 'cos new
		documents will read the preferences themselves.
 *–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*/
- (IBAction)optionChanged:(id)sender
{
	[tidyProcess writeOptionValuesWithDefaults:[NSUserDefaults standardUserDefaults]];
}

@end
