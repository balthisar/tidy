/***************************************************************************************
    PreferenceController.m -- part of Balthisar Tidy

    The main preference controller. Here we'll control the following:
        o Handles the application preferences.
        o Implements class methods to be used before instantiation.
 ***************************************************************************************/

#import <Cocoa/Cocoa.h>
#import "PreferenceController.h"
#import "JSDTidy.h"

// these convenience definitions for our prefs keys.
// the rest are generated by TidyLib directly.
NSString *JSDKeySavingPrefStyle = @"SavingPrefStyle";
NSString *JSDKeyWarnBeforeOverwrite = @"WarnBeforeOverwrite";
NSString *JSDKeyBatchSavingPrefStyle = @"BatchSavingPrefStyle";


@implementation PreferenceController

/********************************************************************
    registerUserDefaults -- CLASS method.
       register all of the user defaults. Implemented as a CLASS
       method in order to keep this with the preferences controller,
       but the preferences controller won't have been created yet!
*********************************************************************/
+(void)registerUserDefaults {
    NSMutableDictionary *defaultValues = [NSMutableDictionary dictionary]; // create a dictionary
    // put all of the defaults in the dictionary
    [defaultValues setObject:[NSNumber numberWithInt:2] forKey:JSDKeySavingPrefStyle /* was key 10 */];
    [defaultValues setObject:[NSNumber numberWithBool:NO] forKey:JSDKeyWarnBeforeOverwrite /* was key 11 */];
    [defaultValues setObject:[NSNumber numberWithInt:1] forKey:JSDKeyBatchSavingPrefStyle /* was key 14 */];
    [JSDTidyDocument addDefaultsToDictionary:defaultValues]; // get the defaults ultimately from the linked-in TidyLib
    // register the defaults with the defaults system
    [[NSUserDefaults standardUserDefaults] registerDefaults: defaultValues];
} // registerUserDefaults

/********************************************************************
    init
    Our creator -- we want to load the nib "Preferences".
*********************************************************************/
- (id)init {
    if (self = [super initWithWindowNibName:@"Preferences"]) 
        [self setWindowFrameAutosaveName:@"PrefWindow"];
    return self;
} // init

/********************************************************************
    dealloc
        clean up.
*********************************************************************/
- (void)dealloc
{
    tidyProcess = nil;
    [optionController release];
    [super dealloc];
} // dealloc

/********************************************************************
    awakeFromNib
    When we wake from the nib file, setup the option pane controller.
*********************************************************************/
-(void) awakeFromNib {
    // create a OptionPaneController and put it in place of optionPane
    if (!optionController)
        optionController = [[OptionPaneController alloc] init];
    [optionController putViewIntoView:optionPane];
    [optionController setTarget:self];
    [optionController setAction:@selector(optionChanged:)];
    tidyProcess = [optionController tidyDocument];
} // awakeFromNib


/********************************************************************
    windowDidLoad
    when the window has loaded, let's put the correct preferences on.
*********************************************************************/
- (void)windowDidLoad {
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [saving1 setState:([defaults integerForKey: JSDKeySavingPrefStyle] == 1)];
    [saving2 setState:([defaults integerForKey: JSDKeySavingPrefStyle] == 2)];
    [savingWarn setState:[defaults boolForKey: JSDKeyWarnBeforeOverwrite]];
    [savingWarn setEnabled:[saving1 state]];
    [batchSaving1 setState:([defaults integerForKey: JSDKeyBatchSavingPrefStyle] == 1)];
    [batchSaving2 setState:([defaults integerForKey: JSDKeyBatchSavingPrefStyle] == 2)];
    // load the default systems preferences.
    [tidyProcess takeOptionValuesFromDefaults:defaults];
} // windowDidLoad

/********************************************************************
    radioSavingChanged
        one of the radio buttons for saving options has changed.
        Handle this apart, since we're not using a matrix.
*********************************************************************/
-(IBAction)radioSavingChanged:(id)sender {
    [saving1 setState:NO];
    [saving2 setState:NO];
    [sender setState:YES];
    [savingWarn setEnabled:[saving1 state]];
    [self preferenceChanged:nil];
} // radioSavingChanged


/********************************************************************
    radioBatchChanged
        one of the radio buttons for batch options has changed.
        Handle this apart, since we're not using a matrix.
*********************************************************************/
-(IBAction)radioBatchChanged:(id)sender {
    [batchSaving1 setState:NO];
    [batchSaving2 setState:NO];
    [sender setState:YES];
    [self preferenceChanged:nil];
} // radioSavingChanged

/********************************************************************
    preferenceChanged
        one of the saving/batch prefs changed. Log and notify.
*********************************************************************/
-(IBAction)preferenceChanged:(id)sender {
    // update the preference registry
    [[NSUserDefaults standardUserDefaults] setInteger:0 forKey:JSDKeySavingPrefStyle];
    if ([saving1 state]) [[NSUserDefaults standardUserDefaults] setInteger:1 forKey:JSDKeySavingPrefStyle];
    if ([saving2 state]) [[NSUserDefaults standardUserDefaults] setInteger:2 forKey:JSDKeySavingPrefStyle];
    [[NSUserDefaults standardUserDefaults] setBool:[savingWarn state] forKey:JSDKeyWarnBeforeOverwrite];
    [[NSUserDefaults standardUserDefaults] setInteger:0 forKey:JSDKeyBatchSavingPrefStyle];
    if ([batchSaving1 state]) [[NSUserDefaults standardUserDefaults] setInteger:1 forKey:JSDKeyBatchSavingPrefStyle];
    if ([batchSaving2 state]) [[NSUserDefaults standardUserDefaults] setInteger:2 forKey:JSDKeyBatchSavingPrefStyle];
    // send the notification that a saving preference has changed!
    [[NSNotificationCenter defaultCenter] postNotificationName:@"JSDSavePrefChange" object:nil];
}

/********************************************************************
    optionChanged
        one of the preferences changed in the table view. We're
        here as a result of having been set the Action for the 
        OptionPaneController. We're gonna record the preference,
        but we're not going to post a notification, 'cos new
        documents will read the preferences themselves.
*********************************************************************/
-(IBAction)optionChanged:(id)sender {
    [tidyProcess writeOptionValuesWithDefaults:[NSUserDefaults standardUserDefaults]];
} // optionChanged

@end
